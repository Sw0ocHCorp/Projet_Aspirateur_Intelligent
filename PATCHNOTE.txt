PROJET_ASPIRATEUR_INTELLIGENT_V0: 
.Fonctionnalités présentes
-> Création d'un Environnement 1D & 2D:
    * Environnement 1D
        - Indication de la présence de l'Agent par le caractère dans une salle de l'Environnement'*'
        - Indication saleté d'une Classe par une lettre(ou chaine de caractère) de couleur Rouge
        - Indication propreté d'une Classe par une lettre(ou chaine de caractère) de couleur Blanche
        - Possibiliter de configurer la taille de l'Environnement

    * Environnement 2D
        - Indication de la présence de l'Agent par le caractère dans une salle de l'Environnement'*'
        - Indication saleté d'une Classe par une lettre(ou chaine de caractère) de couleur Rouge
        - Indication propreté d'une Classe par une lettre(ou chaine de caractère) de couleur Blanche
        - Possibilité de configurer la largeur de l'Environnement, donc également la Forme de l'Environnement
-> Création d'un Agent interagissant avec l'Environnement:
    * Implémentation d'une Méthode de prise d'actions aléatoire par l'Agent
    * Implémentation d'une Méthode de prise d'actions par l'Agent en fonction d'une Mémoire de l'Environnement via Etat Interne (Table de Transition)
    * Détection des bord de l'Environnement

.Fonctionnalités à Développer
-> Définir une Méthode d'évaluation de l'Agent pertinente
-> Approfondir la Méthode Etat Interne (arrêter de choisir une action aléatoire si plusieurs actions sont possibles)
-> Fixer les problèmes de Reset de l'Environnement & Agent quand on veut commencer l'epoch suivant
-> Implémenter la Pénalisation de l'Agent


-----------------------------------------------------------------------------------
PROJET_ASPIRATEUR_INTELLIGENT_V1: 
.Fonctionnalités ajoutées
-> Création des Méthodes d'évaluation de l'Agent
    * Environnement 2D
        - Algorithme A*
    * Environnement 1D
        - Méthode Classique
-> Fix ordre index des positions des Classes dans l'Environnement
-> Réorganisation de l'arborescence du projet
-> TD1 terminé

.Fonctionnalités à Développer
-> Définir une Méthode d'évaluation de l'Agent pertinente
-> Approfondir la Méthode Etat Interne (arrêter de choisir une action aléatoire si plusieurs actions sont possibles)
-> Fixer les problèmes de Reset de l'Environnement & Agent quand on veut commencer l'epoch suivant
-> Implémenter la Pénalisation de l'Agent

-----------------------------------------------------------------------------------
PROJET_ASPIRATEUR_INTELLIGENT_V2: 
.Fonctionnalités ajoutées
-> Création des Méthodes d'évaluation de l'Agent
    * Environnement 2D
        - Algorithme A* -> Méthode d'évaluation retenue
-> Fix ordre index des positions des Classes dans l'Environnement
-> Réorganisation de l'arborescence du projet
-> Récupération de la dernière action prise pour optimiser l'Etat Interne de l'Agent
-> Fix problème de Reset de l'Environnement & Agent quand on veut commencer l'epoch suivant ==> Possibilité de run plusieurs epochs
--> Penalisation de l'Agent pour chaque action prise incluse dans la mesure de Performance(-0.5 / action "en trop")
-> TD1 terminé
-> Implémentation du Modèle de l'Agent(Mapping de tous les états de l'environnement en début d'epochs)
-> Implémentation de l'arbre de décision de l'Agent(Condtion-Action)
-> implementation de la variante probabiliste de l'Environment
-> TD2 terminé

.Fonctionnalités à Développer
-> Régler les problèmes d'update du compteur d'actions optimales de l'Agent quand des pièces se salissent(Méthode non stable pour l'instant)
